paths:
  /api/products/:
    get: 
      summary: Get all the products that are available in the database
      tags: 
        - Products
      responses: 
        "200":
          description: An Array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: Error in the server while getting the products

    post: 
      summary: Create a new product
      description: Add a new product to the database. Requires authentication and admin or premium user access.
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createProduct'
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Invalid product data
        '500':
          description: Error creating product


  /api/products/{pid}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '404':
          description: Product not found
        '500':
          description: Server error finding product

    put:
      summary: Update product by ID
      description: Update a specific product by its ID. Requires authentication and admin or premium user access.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createProduct'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '500':
          description: Error updating product

    delete:
      summary: Delete product by ID
      description: Delete a specific product by its ID. Requires authentication and admin or premium user access.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        '200':
          description: Product deleted successfully
        '500':
          description: Error deleting product

components:
  schemas: 
    Products:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID assigned by MongoDB
        title: 
          type: string 
          description: Name of the product
          required: true
        description: 
          type: string
          description: Description of the product
          required: true
        code: 
          type: string
          description: Code of the product
          required: true
        price: 
          type: number
          description: Price of the product
          required: true
        status: 
          type: boolean
          default: true
        stock: 
          type: number
          description: Quantity available of the product
          required: true
        category: 
          type: string
          description: Category of the product
          required: true
        thumbnail: 
          type: string
          description: Image/URL of the product
        owner:
          type: object
          description: Ownership details of the product
          properties:
            user:
              type: ObjectId 
              description: ID reference to the User model
              nullable: true
            admin:
              type: boolean
              description: Indicates if the owner has admin privileges
              default: false
      example: 
        _id: ObjectId(66d6961c2ddf567f42a9c54d)
        title: "Producto de Prueba"
        description: "Descripcion detallada del producto"
        code: "123edf"
        price: 45
        status: true
        stock: 102
        category: "Categoria"
        thumbnail: null
        owner: {user: ObjectId(66ce64cf159ab41352129cff), admin: false}
  requestBodies:
    createProduct:
      type: object
      properties:
        title: 
          type: string 
          description: Name of the product
          required: true
        description: 
          type: string
          description: Description of the product
          required: true
        code: 
          type: string
          description: Code of the product
          required: true
        price: 
          type: number
          description: Price of the product
          required: true
        stock: 
          type: number
          description: Quantity available of the product
          required: true
        category: 
          type: string
          description: Category of the product
          required: true
        thumbnail: 
          type: string
          description: Image/URL of the product
      example: 
        title: "Producto de Prueba"
        description: "Descripcion detallada del producto"
        code: "123edf"
        price: 45
        stock: 102
        category: "Categoria"
        thumbnail: null